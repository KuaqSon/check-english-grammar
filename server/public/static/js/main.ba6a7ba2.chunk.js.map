{"version":3,"sources":["Services/grammar.js","Components/Loading/index.js","Components/FormText.js","Components/ResultCard.js","App.js","serviceWorker.js","index.js"],"names":["BaseUrl","process","MODE","Loading","class","FormText","callback","useState","loading","setLoading","useForm","register","handleSubmit","onSubmitCallback","errors","data","console","log","className","onSubmit","text","axios","method","url","language","then","response","matches","catch","e","error","checkSentence","rows","name","placeholder","ref","required","maxLength","type","value","ResultCard","message","result","App","setMatches","map","m","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUACMA,EAA+B,SAArBC,8CAAYC,KAAkB,GAAK,wBCMpCC,G,MAJC,WACd,OAAO,yBAAKC,MAAM,iBCCL,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SAAY,EACfC,oBAAS,GADM,mBACtCC,EADsC,KAC7BC,EAD6B,OAEFC,cAAnCC,EAFqC,EAErCA,SAAUC,EAF2B,EAE3BA,aAMZC,GARuC,EAEbC,OAMP,SAAAC,GACvBC,QAAQC,IAAI,+BAAgCF,GACxCT,GAAUA,EAASS,GACvBN,GAAW,KAGb,OACE,0BAAMS,UAAU,oBAAoBC,SAAUP,GAZ/B,SAAAG,GACfN,GAAW,GFNc,SAAC,EAAUH,GAAc,IAAtBc,EAAqB,EAArBA,KAC9BC,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKvB,EAAL,yBACHe,KAAM,CACJS,SAAU,QACVJ,UAGDK,MAAK,SAAAC,GACApB,GAAYoB,EAASX,MAAMT,EAASoB,EAASX,KAAKY,YAEvDC,OAAM,SAAAC,GACLb,QAAQc,MAAMD,MENhBE,CAAchB,EAAMF,OAWlB,4BACE,yCADF,UAGA,8BACEK,UAAU,YACVc,KAAK,IACLC,KAAK,OACLC,YAAY,6BACZC,IAAKxB,EAAS,CAAEyB,UAAU,EAAMC,UAAW,QAG7C,2BAAOnB,UAAU,MAAMoB,KAAK,SAASC,MAAM,UAE1C/B,GAAW,kBAAC,EAAD,OCjCH,SAASgC,EAAT,GAA+B,IAE1CC,EAFyC,EAATC,OAEhCD,QAGF,OACE,yBAAKvB,UAAU,QACb,4BAAKuB,ICaIE,MAhBf,WAAgB,IAAD,EACiBpC,mBAAS,IAD1B,mBACNoB,EADM,KACGiB,EADH,KAGb,OACE,yBAAK1B,UAAU,OACb,kBAACb,EAAD,CAAUC,SAAU,SAAAqB,GAAO,OAAIiB,EAAWjB,MAEzCA,EAAQkB,KAAI,SAACC,EAAGC,GAAJ,OACX,kBAACP,EAAD,CAAYQ,IAAKD,EAAOL,OAAQI,OAGlC,mECJcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.ba6a7ba2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst BaseUrl = process.env.MODE === \"prod\" ? \"\" : \"http://localhost:3001\";\r\n\r\nexport const checkSentence = ({ text }, callback) => {\r\n  axios({\r\n    method: \"post\",\r\n    url: `${BaseUrl}/api/v1/grammar/check`,\r\n    data: {\r\n      language: \"en-US\",\r\n      text\r\n    }\r\n  })\r\n    .then(response => {\r\n      if (callback && response.data) callback(response.data.matches);\r\n    })\r\n    .catch(e => {\r\n      console.error(e);\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport \"./Loading.css\";\r\n\r\nconst Loading = () => {\r\n  return <div class=\"boxLoading\"></div>;\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { checkSentence } from \"../Services/grammar\";\r\nimport Loading from \"./Loading\";\r\n\r\nexport default function FormText({ callback }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = data => {\r\n    setLoading(true);\r\n    checkSentence(data, onSubmitCallback);\r\n  };\r\n\r\n  const onSubmitCallback = data => {\r\n    console.log(\"\\nLog ->\\n: FormText -> data\", data);\r\n    if (callback) callback(data);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <form className=\"card pos-relative\" onSubmit={handleSubmit(onSubmit)}>\r\n      <h1>\r\n        <span>Grammar</span> Check\r\n      </h1>\r\n      <textarea\r\n        className=\"input-box\"\r\n        rows=\"8\"\r\n        name=\"text\"\r\n        placeholder=\"Type your sentence here...\"\r\n        ref={register({ required: true, maxLength: 50000 })}\r\n      />\r\n\r\n      <input className=\"btn\" type=\"submit\" value=\"check\" />\r\n\r\n      {loading && <Loading />}\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport default function ResultCard({result}) {\r\n  const {\r\n    message\r\n  } = result;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <h6>{message}</h6>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport FormText from \"./Components/FormText\";\nimport ResultCard from \"./Components/ResultCard\";\n\nfunction App() {\n  const [matches, setMatches] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <FormText callback={matches => setMatches(matches)} />\n\n      {matches.map((m, index) => (\n        <ResultCard key={index} result={m} />\n      ))}\n\n      <footer>Made by Quang Son with ‚ù§</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}